import os
import sys
from supabase import create_client, Client
from dotenv import load_dotenv
import uuid
from datetime import datetime

# Load environment variables
load_dotenv()

# Initialize Supabase client
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")

if not supabase_url or not supabase_key:
    print("Error: SUPABASE_URL and SUPABASE_KEY must be set in .env file")
    sys.exit(1)

supabase: Client = create_client(supabase_url, supabase_key)

def create_tables():
    """Create the necessary tables in Supabase if they don't exist."""
    print("üîß Creating tables in Supabase...")
    
    # Create chatbots table
    try:
        supabase.rpc('''
        create table if not exists public.chatbots (
            id uuid primary key default uuid_generate_v4(),
            api_key text not null unique,
            model_name text not null,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null,
            updated_at timestamp with time zone default timezone('utc'::text, now()) not null
        );
        ''').execute()
        print("‚úÖ Created 'chatbots' table")
    except Exception as e:
        print(f"‚ùå Error creating 'chatbots' table: {str(e)}")
    
    # Create sessions table
    try:
        supabase.rpc('''
        create table if not exists public.sessions (
            session_id uuid primary key default uuid_generate_v4(),
            chatbot_id uuid references public.chatbots(id) on delete cascade,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null,
            last_activity timestamp with time zone default timezone('utc'::text, now()) not null,
            is_active boolean default true,
            is_widget boolean default false
        );
        ''').execute()
        print("‚úÖ Created 'sessions' table")
    except Exception as e:
        print(f"‚ùå Error creating 'sessions' table: {str(e)}")
    
    # Create conversations table
    try:
        supabase.rpc('''
        create table if not exists public.conversations (
            id bigint generated by default as identity primary key,
            session_id uuid references public.sessions(session_id) on delete cascade,
            role text not null,
            content text not null,
            timestamp timestamp with time zone default timezone('utc'::text, now()) not null
        );
        ''').execute()
        print("‚úÖ Created 'conversations' table")
    except Exception as e:
        print(f"‚ùå Error creating 'conversations' table: {str(e)}")
    
    # Create indexes
    try:
        supabase.rpc('''
        create index if not exists idx_sessions_chatbot_id on public.sessions(chatbot_id);
        create index if not exists idx_conversations_session_id on public.conversations(session_id);
        create index if not exists idx_conversations_timestamp on public.conversations(timestamp);
        ''').execute()
        print("‚úÖ Created indexes")
    except Exception as e:
        print(f"‚ùå Error creating indexes: {str(e)}")

def add_sample_data():
    """Add sample data to the database for testing."""
    print("\nüìù Adding sample data...")
    
    # Sample chatbot data
    chatbot_id = "e97f4988-4f70-470b-b2e5-aca28ddbcff0"
    api_key = "c8bc40f2-e83d-4e92-ac2b-d5bd6444da0a"
    model_name = "openai/gpt-3.5-turbo"
    
    try:
        # Check if the chatbot already exists
        existing = supabase.table("chatbots").select("*").eq("id", chatbot_id).execute()
        
        if not existing.data:
            # Insert sample chatbot
            supabase.table("chatbots").insert({
                "id": chatbot_id,
                "api_key": api_key,
                "model_name": model_name
            }).execute()
            print(f"‚úÖ Added sample chatbot with ID: {chatbot_id}")
        else:
            print("‚ÑπÔ∏è  Sample chatbot already exists")
    except Exception as e:
        print(f"‚ùå Error adding sample chatbot: {str(e)}")

if __name__ == "__main__":
    print("üöÄ Initializing database...")
    create_tables()
    add_sample_data()
    print("\n‚ú® Database initialization complete!")
